// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// PostApiV1AdminLoginJSONBody defines parameters for PostApiV1AdminLogin.
type PostApiV1AdminLoginJSONBody struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetApiV1AuthorsParams defines parameters for GetApiV1Authors.
type GetApiV1AuthorsParams struct {
	Limit  *float32 `form:"limit,omitempty" json:"limit,omitempty"`
	Name   *string  `form:"name,omitempty" json:"name,omitempty"`
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1AuthorsJSONBody defines parameters for PostApiV1Authors.
type PostApiV1AuthorsJSONBody struct {
	Description string `json:"description"`
	ImageId     string `json:"imageId"`
	Name        string `json:"name"`
}

// PatchApiV1AuthorsAuthorIdJSONBody defines parameters for PatchApiV1AuthorsAuthorId.
type PatchApiV1AuthorsAuthorIdJSONBody struct {
	Description *string `json:"description,omitempty"`
	ImageId     *string `json:"imageId,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// GetApiV1BooksParams defines parameters for GetApiV1Books.
type GetApiV1BooksParams struct {
	AuthorId   *string  `form:"authorId,omitempty" json:"authorId,omitempty"`
	AuthorName *string  `form:"authorName,omitempty" json:"authorName,omitempty"`
	Limit      *float32 `form:"limit,omitempty" json:"limit,omitempty"`
	Name       *string  `form:"name,omitempty" json:"name,omitempty"`
	Offset     *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1BooksJSONBody defines parameters for PostApiV1Books.
type PostApiV1BooksJSONBody struct {
	AuthorId    string `json:"authorId"`
	Description string `json:"description"`
	ImageId     string `json:"imageId"`
	Name        string `json:"name"`
	NameRuby    string `json:"nameRuby"`
	ReleaseId   string `json:"releaseId"`
}

// PatchApiV1BooksBookIdJSONBody defines parameters for PatchApiV1BooksBookId.
type PatchApiV1BooksBookIdJSONBody struct {
	AuthorId    *string `json:"authorId,omitempty"`
	Description *string `json:"description,omitempty"`
	ImageId     *string `json:"imageId,omitempty"`
	Name        *string `json:"name,omitempty"`
	NameRuby    *string `json:"nameRuby,omitempty"`
	ReleaseId   *string `json:"releaseId,omitempty"`
}

// GetApiV1EpisodePagesParams defines parameters for GetApiV1EpisodePages.
type GetApiV1EpisodePagesParams struct {
	EpisodeId string   `form:"episodeId" json:"episodeId"`
	Limit     *float32 `form:"limit,omitempty" json:"limit,omitempty"`
	Offset    *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1EpisodePagesJSONBody defines parameters for PostApiV1EpisodePages.
type PostApiV1EpisodePagesJSONBody struct {
	EpisodeId string  `json:"episodeId"`
	Id        *string `json:"id,omitempty"`
	ImageId   string  `json:"imageId"`
	Page      float32 `json:"page"`
}

// PatchApiV1EpisodePagesEpisodePageIdJSONBody defines parameters for PatchApiV1EpisodePagesEpisodePageId.
type PatchApiV1EpisodePagesEpisodePageIdJSONBody struct {
	EpisodeId *string  `json:"episodeId,omitempty"`
	Id        *string  `json:"id,omitempty"`
	ImageId   *string  `json:"imageId,omitempty"`
	Page      *float32 `json:"page,omitempty"`
}

// GetApiV1EpisodesParams defines parameters for GetApiV1Episodes.
type GetApiV1EpisodesParams struct {
	BookId string   `form:"bookId" json:"bookId"`
	Limit  *float32 `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1EpisodesJSONBody defines parameters for PostApiV1Episodes.
type PostApiV1EpisodesJSONBody struct {
	BookId      string  `json:"bookId"`
	Chapter     float32 `json:"chapter"`
	Description string  `json:"description"`
	ImageId     string  `json:"imageId"`
	Name        string  `json:"name"`
	NameRuby    string  `json:"nameRuby"`
}

// PatchApiV1EpisodesEpisodeIdJSONBody defines parameters for PatchApiV1EpisodesEpisodeId.
type PatchApiV1EpisodesEpisodeIdJSONBody struct {
	BookId      *string  `json:"bookId,omitempty"`
	Chapter     *float32 `json:"chapter,omitempty"`
	Description *string  `json:"description,omitempty"`
	ImageId     *string  `json:"imageId,omitempty"`
	Name        *string  `json:"name,omitempty"`
	NameRuby    *string  `json:"nameRuby,omitempty"`
}

// GetApiV1FeaturesParams defines parameters for GetApiV1Features.
type GetApiV1FeaturesParams struct {
	Limit  *float32 `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1ImagesMultipartBody defines parameters for PostApiV1Images.
type PostApiV1ImagesMultipartBody struct {
	Alt     string              `json:"alt"`
	Content *openapi_types.File `json:"content,omitempty"`
}

// GetApiV1RankingsParams defines parameters for GetApiV1Rankings.
type GetApiV1RankingsParams struct {
	Limit  *float32 `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// PostApiV1AdminLoginJSONRequestBody defines body for PostApiV1AdminLogin for application/json ContentType.
type PostApiV1AdminLoginJSONRequestBody PostApiV1AdminLoginJSONBody

// PostApiV1AuthorsJSONRequestBody defines body for PostApiV1Authors for application/json ContentType.
type PostApiV1AuthorsJSONRequestBody PostApiV1AuthorsJSONBody

// PatchApiV1AuthorsAuthorIdJSONRequestBody defines body for PatchApiV1AuthorsAuthorId for application/json ContentType.
type PatchApiV1AuthorsAuthorIdJSONRequestBody PatchApiV1AuthorsAuthorIdJSONBody

// PostApiV1BooksJSONRequestBody defines body for PostApiV1Books for application/json ContentType.
type PostApiV1BooksJSONRequestBody PostApiV1BooksJSONBody

// PatchApiV1BooksBookIdJSONRequestBody defines body for PatchApiV1BooksBookId for application/json ContentType.
type PatchApiV1BooksBookIdJSONRequestBody PatchApiV1BooksBookIdJSONBody

// PostApiV1EpisodePagesJSONRequestBody defines body for PostApiV1EpisodePages for application/json ContentType.
type PostApiV1EpisodePagesJSONRequestBody PostApiV1EpisodePagesJSONBody

// PatchApiV1EpisodePagesEpisodePageIdJSONRequestBody defines body for PatchApiV1EpisodePagesEpisodePageId for application/json ContentType.
type PatchApiV1EpisodePagesEpisodePageIdJSONRequestBody PatchApiV1EpisodePagesEpisodePageIdJSONBody

// PostApiV1EpisodesJSONRequestBody defines body for PostApiV1Episodes for application/json ContentType.
type PostApiV1EpisodesJSONRequestBody PostApiV1EpisodesJSONBody

// PatchApiV1EpisodesEpisodeIdJSONRequestBody defines body for PatchApiV1EpisodesEpisodeId for application/json ContentType.
type PatchApiV1EpisodesEpisodeIdJSONRequestBody PatchApiV1EpisodesEpisodeIdJSONBody

// PostApiV1ImagesMultipartRequestBody defines body for PostApiV1Images for multipart/form-data ContentType.
type PostApiV1ImagesMultipartRequestBody PostApiV1ImagesMultipartBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostApiV1AdminLoginWithBody request with any body
	PostApiV1AdminLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1AdminLogin(ctx context.Context, body PostApiV1AdminLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AdminLogout request
	PostApiV1AdminLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AdminMe request
	GetApiV1AdminMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Authors request
	GetApiV1Authors(ctx context.Context, params *GetApiV1AuthorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AuthorsWithBody request with any body
	PostApiV1AuthorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Authors(ctx context.Context, body PostApiV1AuthorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1AuthorsAuthorId request
	DeleteApiV1AuthorsAuthorId(ctx context.Context, authorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AuthorsAuthorId request
	GetApiV1AuthorsAuthorId(ctx context.Context, authorId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV1AuthorsAuthorIdWithBody request with any body
	PatchApiV1AuthorsAuthorIdWithBody(ctx context.Context, authorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV1AuthorsAuthorId(ctx context.Context, authorId string, body PatchApiV1AuthorsAuthorIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Books request
	GetApiV1Books(ctx context.Context, params *GetApiV1BooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1BooksWithBody request with any body
	PostApiV1BooksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Books(ctx context.Context, body PostApiV1BooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1BooksBookId request
	DeleteApiV1BooksBookId(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1BooksBookId request
	GetApiV1BooksBookId(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV1BooksBookIdWithBody request with any body
	PatchApiV1BooksBookIdWithBody(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV1BooksBookId(ctx context.Context, bookId string, body PatchApiV1BooksBookIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1EpisodePages request
	GetApiV1EpisodePages(ctx context.Context, params *GetApiV1EpisodePagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1EpisodePagesWithBody request with any body
	PostApiV1EpisodePagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1EpisodePages(ctx context.Context, body PostApiV1EpisodePagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1EpisodePagesEpisodePageId request
	DeleteApiV1EpisodePagesEpisodePageId(ctx context.Context, episodePageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV1EpisodePagesEpisodePageIdWithBody request with any body
	PatchApiV1EpisodePagesEpisodePageIdWithBody(ctx context.Context, episodePageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV1EpisodePagesEpisodePageId(ctx context.Context, episodePageId string, body PatchApiV1EpisodePagesEpisodePageIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1EpisodePagesPageId request
	GetApiV1EpisodePagesPageId(ctx context.Context, pageId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Episodes request
	GetApiV1Episodes(ctx context.Context, params *GetApiV1EpisodesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1EpisodesWithBody request with any body
	PostApiV1EpisodesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1Episodes(ctx context.Context, body PostApiV1EpisodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1EpisodesEpisodeId request
	DeleteApiV1EpisodesEpisodeId(ctx context.Context, episodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1EpisodesEpisodeId request
	GetApiV1EpisodesEpisodeId(ctx context.Context, episodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApiV1EpisodesEpisodeIdWithBody request with any body
	PatchApiV1EpisodesEpisodeIdWithBody(ctx context.Context, episodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApiV1EpisodesEpisodeId(ctx context.Context, episodeId string, body PatchApiV1EpisodesEpisodeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Features request
	GetApiV1Features(ctx context.Context, params *GetApiV1FeaturesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1ImagesWithBody request with any body
	PostApiV1ImagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1Initialize request
	PostApiV1Initialize(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Rankings request
	GetApiV1Rankings(ctx context.Context, params *GetApiV1RankingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Releases request
	GetApiV1Releases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1ReleasesDayOfWeek request
	GetApiV1ReleasesDayOfWeek(ctx context.Context, dayOfWeek string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostApiV1AdminLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AdminLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AdminLogin(ctx context.Context, body PostApiV1AdminLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AdminLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AdminLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AdminLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AdminMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AdminMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Authors(ctx context.Context, params *GetApiV1AuthorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AuthorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AuthorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AuthorsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Authors(ctx context.Context, body PostApiV1AuthorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AuthorsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1AuthorsAuthorId(ctx context.Context, authorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1AuthorsAuthorIdRequest(c.Server, authorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AuthorsAuthorId(ctx context.Context, authorId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AuthorsAuthorIdRequest(c.Server, authorId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV1AuthorsAuthorIdWithBody(ctx context.Context, authorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV1AuthorsAuthorIdRequestWithBody(c.Server, authorId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV1AuthorsAuthorId(ctx context.Context, authorId string, body PatchApiV1AuthorsAuthorIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV1AuthorsAuthorIdRequest(c.Server, authorId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Books(ctx context.Context, params *GetApiV1BooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1BooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1BooksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1BooksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Books(ctx context.Context, body PostApiV1BooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1BooksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1BooksBookId(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1BooksBookIdRequest(c.Server, bookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1BooksBookId(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1BooksBookIdRequest(c.Server, bookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV1BooksBookIdWithBody(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV1BooksBookIdRequestWithBody(c.Server, bookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV1BooksBookId(ctx context.Context, bookId string, body PatchApiV1BooksBookIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV1BooksBookIdRequest(c.Server, bookId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1EpisodePages(ctx context.Context, params *GetApiV1EpisodePagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1EpisodePagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1EpisodePagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1EpisodePagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1EpisodePages(ctx context.Context, body PostApiV1EpisodePagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1EpisodePagesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1EpisodePagesEpisodePageId(ctx context.Context, episodePageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1EpisodePagesEpisodePageIdRequest(c.Server, episodePageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV1EpisodePagesEpisodePageIdWithBody(ctx context.Context, episodePageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV1EpisodePagesEpisodePageIdRequestWithBody(c.Server, episodePageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV1EpisodePagesEpisodePageId(ctx context.Context, episodePageId string, body PatchApiV1EpisodePagesEpisodePageIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV1EpisodePagesEpisodePageIdRequest(c.Server, episodePageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1EpisodePagesPageId(ctx context.Context, pageId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1EpisodePagesPageIdRequest(c.Server, pageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Episodes(ctx context.Context, params *GetApiV1EpisodesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1EpisodesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1EpisodesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1EpisodesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Episodes(ctx context.Context, body PostApiV1EpisodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1EpisodesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1EpisodesEpisodeId(ctx context.Context, episodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1EpisodesEpisodeIdRequest(c.Server, episodeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1EpisodesEpisodeId(ctx context.Context, episodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1EpisodesEpisodeIdRequest(c.Server, episodeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV1EpisodesEpisodeIdWithBody(ctx context.Context, episodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV1EpisodesEpisodeIdRequestWithBody(c.Server, episodeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApiV1EpisodesEpisodeId(ctx context.Context, episodeId string, body PatchApiV1EpisodesEpisodeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApiV1EpisodesEpisodeIdRequest(c.Server, episodeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Features(ctx context.Context, params *GetApiV1FeaturesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1FeaturesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ImagesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ImagesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Initialize(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1InitializeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Rankings(ctx context.Context, params *GetApiV1RankingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1RankingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Releases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ReleasesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1ReleasesDayOfWeek(ctx context.Context, dayOfWeek string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ReleasesDayOfWeekRequest(c.Server, dayOfWeek)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostApiV1AdminLoginRequest calls the generic PostApiV1AdminLogin builder with application/json body
func NewPostApiV1AdminLoginRequest(server string, body PostApiV1AdminLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1AdminLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1AdminLoginRequestWithBody generates requests for PostApiV1AdminLogin with any type of body
func NewPostApiV1AdminLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1AdminLogoutRequest generates requests for PostApiV1AdminLogout
func NewPostApiV1AdminLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AdminMeRequest generates requests for GetApiV1AdminMe
func NewGetApiV1AdminMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AuthorsRequest generates requests for GetApiV1Authors
func NewGetApiV1AuthorsRequest(server string, params *GetApiV1AuthorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/authors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1AuthorsRequest calls the generic PostApiV1Authors builder with application/json body
func NewPostApiV1AuthorsRequest(server string, body PostApiV1AuthorsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1AuthorsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1AuthorsRequestWithBody generates requests for PostApiV1Authors with any type of body
func NewPostApiV1AuthorsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/authors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1AuthorsAuthorIdRequest generates requests for DeleteApiV1AuthorsAuthorId
func NewDeleteApiV1AuthorsAuthorIdRequest(server string, authorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authorId", runtime.ParamLocationPath, authorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/authors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AuthorsAuthorIdRequest generates requests for GetApiV1AuthorsAuthorId
func NewGetApiV1AuthorsAuthorIdRequest(server string, authorId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authorId", runtime.ParamLocationPath, authorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/authors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV1AuthorsAuthorIdRequest calls the generic PatchApiV1AuthorsAuthorId builder with application/json body
func NewPatchApiV1AuthorsAuthorIdRequest(server string, authorId string, body PatchApiV1AuthorsAuthorIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV1AuthorsAuthorIdRequestWithBody(server, authorId, "application/json", bodyReader)
}

// NewPatchApiV1AuthorsAuthorIdRequestWithBody generates requests for PatchApiV1AuthorsAuthorId with any type of body
func NewPatchApiV1AuthorsAuthorIdRequestWithBody(server string, authorId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authorId", runtime.ParamLocationPath, authorId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/authors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1BooksRequest generates requests for GetApiV1Books
func NewGetApiV1BooksRequest(server string, params *GetApiV1BooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/books")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AuthorId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authorId", runtime.ParamLocationQuery, *params.AuthorId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthorName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authorName", runtime.ParamLocationQuery, *params.AuthorName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1BooksRequest calls the generic PostApiV1Books builder with application/json body
func NewPostApiV1BooksRequest(server string, body PostApiV1BooksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1BooksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1BooksRequestWithBody generates requests for PostApiV1Books with any type of body
func NewPostApiV1BooksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/books")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1BooksBookIdRequest generates requests for DeleteApiV1BooksBookId
func NewDeleteApiV1BooksBookIdRequest(server string, bookId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/books/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1BooksBookIdRequest generates requests for GetApiV1BooksBookId
func NewGetApiV1BooksBookIdRequest(server string, bookId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/books/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV1BooksBookIdRequest calls the generic PatchApiV1BooksBookId builder with application/json body
func NewPatchApiV1BooksBookIdRequest(server string, bookId string, body PatchApiV1BooksBookIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV1BooksBookIdRequestWithBody(server, bookId, "application/json", bodyReader)
}

// NewPatchApiV1BooksBookIdRequestWithBody generates requests for PatchApiV1BooksBookId with any type of body
func NewPatchApiV1BooksBookIdRequestWithBody(server string, bookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/books/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1EpisodePagesRequest generates requests for GetApiV1EpisodePages
func NewGetApiV1EpisodePagesRequest(server string, params *GetApiV1EpisodePagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/episodePages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "episodeId", runtime.ParamLocationQuery, params.EpisodeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1EpisodePagesRequest calls the generic PostApiV1EpisodePages builder with application/json body
func NewPostApiV1EpisodePagesRequest(server string, body PostApiV1EpisodePagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1EpisodePagesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1EpisodePagesRequestWithBody generates requests for PostApiV1EpisodePages with any type of body
func NewPostApiV1EpisodePagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/episodePages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1EpisodePagesEpisodePageIdRequest generates requests for DeleteApiV1EpisodePagesEpisodePageId
func NewDeleteApiV1EpisodePagesEpisodePageIdRequest(server string, episodePageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "episodePageId", runtime.ParamLocationPath, episodePageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/episodePages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV1EpisodePagesEpisodePageIdRequest calls the generic PatchApiV1EpisodePagesEpisodePageId builder with application/json body
func NewPatchApiV1EpisodePagesEpisodePageIdRequest(server string, episodePageId string, body PatchApiV1EpisodePagesEpisodePageIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV1EpisodePagesEpisodePageIdRequestWithBody(server, episodePageId, "application/json", bodyReader)
}

// NewPatchApiV1EpisodePagesEpisodePageIdRequestWithBody generates requests for PatchApiV1EpisodePagesEpisodePageId with any type of body
func NewPatchApiV1EpisodePagesEpisodePageIdRequestWithBody(server string, episodePageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "episodePageId", runtime.ParamLocationPath, episodePageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/episodePages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1EpisodePagesPageIdRequest generates requests for GetApiV1EpisodePagesPageId
func NewGetApiV1EpisodePagesPageIdRequest(server string, pageId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pageId", runtime.ParamLocationPath, pageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/episodePages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1EpisodesRequest generates requests for GetApiV1Episodes
func NewGetApiV1EpisodesRequest(server string, params *GetApiV1EpisodesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/episodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bookId", runtime.ParamLocationQuery, params.BookId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1EpisodesRequest calls the generic PostApiV1Episodes builder with application/json body
func NewPostApiV1EpisodesRequest(server string, body PostApiV1EpisodesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1EpisodesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1EpisodesRequestWithBody generates requests for PostApiV1Episodes with any type of body
func NewPostApiV1EpisodesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/episodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1EpisodesEpisodeIdRequest generates requests for DeleteApiV1EpisodesEpisodeId
func NewDeleteApiV1EpisodesEpisodeIdRequest(server string, episodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "episodeId", runtime.ParamLocationPath, episodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/episodes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1EpisodesEpisodeIdRequest generates requests for GetApiV1EpisodesEpisodeId
func NewGetApiV1EpisodesEpisodeIdRequest(server string, episodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "episodeId", runtime.ParamLocationPath, episodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/episodes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApiV1EpisodesEpisodeIdRequest calls the generic PatchApiV1EpisodesEpisodeId builder with application/json body
func NewPatchApiV1EpisodesEpisodeIdRequest(server string, episodeId string, body PatchApiV1EpisodesEpisodeIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApiV1EpisodesEpisodeIdRequestWithBody(server, episodeId, "application/json", bodyReader)
}

// NewPatchApiV1EpisodesEpisodeIdRequestWithBody generates requests for PatchApiV1EpisodesEpisodeId with any type of body
func NewPatchApiV1EpisodesEpisodeIdRequestWithBody(server string, episodeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "episodeId", runtime.ParamLocationPath, episodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/episodes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1FeaturesRequest generates requests for GetApiV1Features
func NewGetApiV1FeaturesRequest(server string, params *GetApiV1FeaturesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1ImagesRequestWithBody generates requests for PostApiV1Images with any type of body
func NewPostApiV1ImagesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/images")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1InitializeRequest generates requests for PostApiV1Initialize
func NewPostApiV1InitializeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/initialize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1RankingsRequest generates requests for GetApiV1Rankings
func NewGetApiV1RankingsRequest(server string, params *GetApiV1RankingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/rankings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ReleasesRequest generates requests for GetApiV1Releases
func NewGetApiV1ReleasesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/releases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1ReleasesDayOfWeekRequest generates requests for GetApiV1ReleasesDayOfWeek
func NewGetApiV1ReleasesDayOfWeekRequest(server string, dayOfWeek string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dayOfWeek", runtime.ParamLocationPath, dayOfWeek)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/releases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostApiV1AdminLoginWithBodyWithResponse request with any body
	PostApiV1AdminLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AdminLoginResponse, error)

	PostApiV1AdminLoginWithResponse(ctx context.Context, body PostApiV1AdminLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AdminLoginResponse, error)

	// PostApiV1AdminLogoutWithResponse request
	PostApiV1AdminLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1AdminLogoutResponse, error)

	// GetApiV1AdminMeWithResponse request
	GetApiV1AdminMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AdminMeResponse, error)

	// GetApiV1AuthorsWithResponse request
	GetApiV1AuthorsWithResponse(ctx context.Context, params *GetApiV1AuthorsParams, reqEditors ...RequestEditorFn) (*GetApiV1AuthorsResponse, error)

	// PostApiV1AuthorsWithBodyWithResponse request with any body
	PostApiV1AuthorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AuthorsResponse, error)

	PostApiV1AuthorsWithResponse(ctx context.Context, body PostApiV1AuthorsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AuthorsResponse, error)

	// DeleteApiV1AuthorsAuthorIdWithResponse request
	DeleteApiV1AuthorsAuthorIdWithResponse(ctx context.Context, authorId string, reqEditors ...RequestEditorFn) (*DeleteApiV1AuthorsAuthorIdResponse, error)

	// GetApiV1AuthorsAuthorIdWithResponse request
	GetApiV1AuthorsAuthorIdWithResponse(ctx context.Context, authorId string, reqEditors ...RequestEditorFn) (*GetApiV1AuthorsAuthorIdResponse, error)

	// PatchApiV1AuthorsAuthorIdWithBodyWithResponse request with any body
	PatchApiV1AuthorsAuthorIdWithBodyWithResponse(ctx context.Context, authorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1AuthorsAuthorIdResponse, error)

	PatchApiV1AuthorsAuthorIdWithResponse(ctx context.Context, authorId string, body PatchApiV1AuthorsAuthorIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1AuthorsAuthorIdResponse, error)

	// GetApiV1BooksWithResponse request
	GetApiV1BooksWithResponse(ctx context.Context, params *GetApiV1BooksParams, reqEditors ...RequestEditorFn) (*GetApiV1BooksResponse, error)

	// PostApiV1BooksWithBodyWithResponse request with any body
	PostApiV1BooksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1BooksResponse, error)

	PostApiV1BooksWithResponse(ctx context.Context, body PostApiV1BooksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1BooksResponse, error)

	// DeleteApiV1BooksBookIdWithResponse request
	DeleteApiV1BooksBookIdWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*DeleteApiV1BooksBookIdResponse, error)

	// GetApiV1BooksBookIdWithResponse request
	GetApiV1BooksBookIdWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*GetApiV1BooksBookIdResponse, error)

	// PatchApiV1BooksBookIdWithBodyWithResponse request with any body
	PatchApiV1BooksBookIdWithBodyWithResponse(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1BooksBookIdResponse, error)

	PatchApiV1BooksBookIdWithResponse(ctx context.Context, bookId string, body PatchApiV1BooksBookIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1BooksBookIdResponse, error)

	// GetApiV1EpisodePagesWithResponse request
	GetApiV1EpisodePagesWithResponse(ctx context.Context, params *GetApiV1EpisodePagesParams, reqEditors ...RequestEditorFn) (*GetApiV1EpisodePagesResponse, error)

	// PostApiV1EpisodePagesWithBodyWithResponse request with any body
	PostApiV1EpisodePagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1EpisodePagesResponse, error)

	PostApiV1EpisodePagesWithResponse(ctx context.Context, body PostApiV1EpisodePagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1EpisodePagesResponse, error)

	// DeleteApiV1EpisodePagesEpisodePageIdWithResponse request
	DeleteApiV1EpisodePagesEpisodePageIdWithResponse(ctx context.Context, episodePageId string, reqEditors ...RequestEditorFn) (*DeleteApiV1EpisodePagesEpisodePageIdResponse, error)

	// PatchApiV1EpisodePagesEpisodePageIdWithBodyWithResponse request with any body
	PatchApiV1EpisodePagesEpisodePageIdWithBodyWithResponse(ctx context.Context, episodePageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1EpisodePagesEpisodePageIdResponse, error)

	PatchApiV1EpisodePagesEpisodePageIdWithResponse(ctx context.Context, episodePageId string, body PatchApiV1EpisodePagesEpisodePageIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1EpisodePagesEpisodePageIdResponse, error)

	// GetApiV1EpisodePagesPageIdWithResponse request
	GetApiV1EpisodePagesPageIdWithResponse(ctx context.Context, pageId string, reqEditors ...RequestEditorFn) (*GetApiV1EpisodePagesPageIdResponse, error)

	// GetApiV1EpisodesWithResponse request
	GetApiV1EpisodesWithResponse(ctx context.Context, params *GetApiV1EpisodesParams, reqEditors ...RequestEditorFn) (*GetApiV1EpisodesResponse, error)

	// PostApiV1EpisodesWithBodyWithResponse request with any body
	PostApiV1EpisodesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1EpisodesResponse, error)

	PostApiV1EpisodesWithResponse(ctx context.Context, body PostApiV1EpisodesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1EpisodesResponse, error)

	// DeleteApiV1EpisodesEpisodeIdWithResponse request
	DeleteApiV1EpisodesEpisodeIdWithResponse(ctx context.Context, episodeId string, reqEditors ...RequestEditorFn) (*DeleteApiV1EpisodesEpisodeIdResponse, error)

	// GetApiV1EpisodesEpisodeIdWithResponse request
	GetApiV1EpisodesEpisodeIdWithResponse(ctx context.Context, episodeId string, reqEditors ...RequestEditorFn) (*GetApiV1EpisodesEpisodeIdResponse, error)

	// PatchApiV1EpisodesEpisodeIdWithBodyWithResponse request with any body
	PatchApiV1EpisodesEpisodeIdWithBodyWithResponse(ctx context.Context, episodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1EpisodesEpisodeIdResponse, error)

	PatchApiV1EpisodesEpisodeIdWithResponse(ctx context.Context, episodeId string, body PatchApiV1EpisodesEpisodeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1EpisodesEpisodeIdResponse, error)

	// GetApiV1FeaturesWithResponse request
	GetApiV1FeaturesWithResponse(ctx context.Context, params *GetApiV1FeaturesParams, reqEditors ...RequestEditorFn) (*GetApiV1FeaturesResponse, error)

	// PostApiV1ImagesWithBodyWithResponse request with any body
	PostApiV1ImagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ImagesResponse, error)

	// PostApiV1InitializeWithResponse request
	PostApiV1InitializeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1InitializeResponse, error)

	// GetApiV1RankingsWithResponse request
	GetApiV1RankingsWithResponse(ctx context.Context, params *GetApiV1RankingsParams, reqEditors ...RequestEditorFn) (*GetApiV1RankingsResponse, error)

	// GetApiV1ReleasesWithResponse request
	GetApiV1ReleasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ReleasesResponse, error)

	// GetApiV1ReleasesDayOfWeekWithResponse request
	GetApiV1ReleasesDayOfWeekWithResponse(ctx context.Context, dayOfWeek string, reqEditors ...RequestEditorFn) (*GetApiV1ReleasesDayOfWeekResponse, error)
}

type PostApiV1AdminLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Description string `json:"description"`
		Id          string `json:"id"`
		Image       struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1AdminLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AdminLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AdminLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1AdminLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AdminLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AdminMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Description string `json:"description"`
		Id          string `json:"id"`
		Image       struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1AdminMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AdminMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AuthorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Books []struct {
			Description string `json:"description"`
			Episodes    []struct {
				Chapter     float32 `json:"chapter"`
				Description string  `json:"description"`
				Id          string  `json:"id"`
				Name        string  `json:"name"`
			} `json:"episodes"`
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name string `json:"name"`
		} `json:"books"`
		Description string `json:"description"`
		Id          string `json:"id"`
		Image       struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
		Name string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1AuthorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AuthorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AuthorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Books []struct {
			Description string `json:"description"`
			Episodes    []struct {
				Chapter     float32 `json:"chapter"`
				Description string  `json:"description"`
				Id          string  `json:"id"`
				Name        string  `json:"name"`
			} `json:"episodes"`
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name string `json:"name"`
		} `json:"books"`
		Description string `json:"description"`
		Id          string `json:"id"`
		Image       struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
		Name string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1AuthorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AuthorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1AuthorsAuthorIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1AuthorsAuthorIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1AuthorsAuthorIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AuthorsAuthorIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Books []struct {
			Description string `json:"description"`
			Episodes    []struct {
				Chapter     float32 `json:"chapter"`
				Description string  `json:"description"`
				Id          string  `json:"id"`
				Name        string  `json:"name"`
			} `json:"episodes"`
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name string `json:"name"`
		} `json:"books"`
		Description string `json:"description"`
		Id          string `json:"id"`
		Image       struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
		Name string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1AuthorsAuthorIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AuthorsAuthorIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV1AuthorsAuthorIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Books []struct {
			Description string `json:"description"`
			Episodes    []struct {
				Chapter     float32 `json:"chapter"`
				Description string  `json:"description"`
				Id          string  `json:"id"`
				Name        string  `json:"name"`
			} `json:"episodes"`
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name string `json:"name"`
		} `json:"books"`
		Description string `json:"description"`
		Id          string `json:"id"`
		Image       struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
		Name string `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchApiV1AuthorsAuthorIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV1AuthorsAuthorIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1BooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Author struct {
			Description string `json:"description"`
			Id          string `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name string `json:"name"`
		} `json:"author"`
		Description string `json:"description"`
		Episodes    []struct {
			Id string `json:"id"`
		} `json:"episodes"`
		Id    string `json:"id"`
		Image struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
		Name     string `json:"name"`
		NameRuby string `json:"nameRuby"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1BooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1BooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1BooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Author struct {
			Description string `json:"description"`
			Id          string `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name string `json:"name"`
		} `json:"author"`
		Description string `json:"description"`
		Episodes    []struct {
			Id string `json:"id"`
		} `json:"episodes"`
		Id    string `json:"id"`
		Image struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
		Name     string `json:"name"`
		NameRuby string `json:"nameRuby"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1BooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1BooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1BooksBookIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1BooksBookIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1BooksBookIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1BooksBookIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Author struct {
			Description string `json:"description"`
			Id          string `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name string `json:"name"`
		} `json:"author"`
		Description string `json:"description"`
		Episodes    []struct {
			Id string `json:"id"`
		} `json:"episodes"`
		Id    string `json:"id"`
		Image struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
		Name     string `json:"name"`
		NameRuby string `json:"nameRuby"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1BooksBookIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1BooksBookIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV1BooksBookIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Author struct {
			Description string `json:"description"`
			Id          string `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name string `json:"name"`
		} `json:"author"`
		Description string `json:"description"`
		Episodes    []struct {
			Id string `json:"id"`
		} `json:"episodes"`
		Id    string `json:"id"`
		Image struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
		Name     string `json:"name"`
		NameRuby string `json:"nameRuby"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchApiV1BooksBookIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV1BooksBookIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1EpisodePagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Id    string `json:"id"`
		Image struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
		Page float32 `json:"page"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1EpisodePagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1EpisodePagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1EpisodePagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id    string `json:"id"`
		Image struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
		Page float32 `json:"page"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1EpisodePagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1EpisodePagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1EpisodePagesEpisodePageIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1EpisodePagesEpisodePageIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1EpisodePagesEpisodePageIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV1EpisodePagesEpisodePageIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id    string `json:"id"`
		Image struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
		Page float32 `json:"page"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchApiV1EpisodePagesEpisodePageIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV1EpisodePagesEpisodePageIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1EpisodePagesPageIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id    string `json:"id"`
		Image struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
		Page float32 `json:"page"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1EpisodePagesPageIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1EpisodePagesPageIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1EpisodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Book struct {
			Author struct {
				Description string `json:"description"`
				Id          string `json:"id"`
				Image       struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"author"`
			Description string `json:"description"`
			Id          string `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name     string `json:"name"`
			NameRuby string `json:"nameRuby"`
		} `json:"book"`
		Chapter     float32 `json:"chapter"`
		Description string  `json:"description"`
		Id          string  `json:"id"`
		Image       struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
		Name     string `json:"name"`
		NameRuby string `json:"nameRuby"`
		Pages    []struct {
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Page float32 `json:"page"`
		} `json:"pages"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1EpisodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1EpisodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1EpisodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Book struct {
			Author struct {
				Description string `json:"description"`
				Id          string `json:"id"`
				Image       struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"author"`
			Description string `json:"description"`
			Id          string `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name     string `json:"name"`
			NameRuby string `json:"nameRuby"`
		} `json:"book"`
		Chapter     float32 `json:"chapter"`
		Description string  `json:"description"`
		Id          string  `json:"id"`
		Image       struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
		Name     string `json:"name"`
		NameRuby string `json:"nameRuby"`
		Pages    []struct {
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Page float32 `json:"page"`
		} `json:"pages"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1EpisodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1EpisodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1EpisodesEpisodeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1EpisodesEpisodeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1EpisodesEpisodeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1EpisodesEpisodeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Book struct {
			Author struct {
				Description string `json:"description"`
				Id          string `json:"id"`
				Image       struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"author"`
			Description string `json:"description"`
			Id          string `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name     string `json:"name"`
			NameRuby string `json:"nameRuby"`
		} `json:"book"`
		Chapter     float32 `json:"chapter"`
		Description string  `json:"description"`
		Id          string  `json:"id"`
		Image       struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
		Name     string `json:"name"`
		NameRuby string `json:"nameRuby"`
		Pages    []struct {
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Page float32 `json:"page"`
		} `json:"pages"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1EpisodesEpisodeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1EpisodesEpisodeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApiV1EpisodesEpisodeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Book struct {
			Author struct {
				Description string `json:"description"`
				Id          string `json:"id"`
				Image       struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"author"`
			Description string `json:"description"`
			Id          string `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name     string `json:"name"`
			NameRuby string `json:"nameRuby"`
		} `json:"book"`
		Chapter     float32 `json:"chapter"`
		Description string  `json:"description"`
		Id          string  `json:"id"`
		Image       struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		} `json:"image"`
		Name     string `json:"name"`
		NameRuby string `json:"nameRuby"`
		Pages    []struct {
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Page float32 `json:"page"`
		} `json:"pages"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchApiV1EpisodesEpisodeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApiV1EpisodesEpisodeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1FeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Book struct {
			Author struct {
				Description string `json:"description"`
				Id          string `json:"id"`
				Image       struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"author"`
			Description string `json:"description"`
			Id          string `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name string `json:"name"`
		} `json:"book"`
		Id string `json:"id"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1FeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1FeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Alt string `json:"alt"`
		Id  string `json:"id"`
	}
}

// Status returns HTTPResponse.Status
func (r PostApiV1ImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1InitializeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1InitializeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1InitializeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1RankingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Book struct {
			Author struct {
				Description string `json:"description"`
				Id          string `json:"id"`
				Image       struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"author"`
			Description string `json:"description"`
			Episodes    []struct {
				Chapter     float32 `json:"chapter"`
				Description string  `json:"description"`
				Id          string  `json:"id"`
				Name        string  `json:"name"`
			} `json:"episodes"`
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name string `json:"name"`
		} `json:"book"`
		Id   string  `json:"id"`
		Rank float32 `json:"rank"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1RankingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1RankingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ReleasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		DayOfWeek string `json:"dayOfWeek"`
		Id        string `json:"id"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ReleasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ReleasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ReleasesDayOfWeekResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Books []struct {
			Author struct {
				Description string `json:"description"`
				Id          string `json:"id"`
				Image       struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"author"`
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name string `json:"name"`
		} `json:"books"`
		DayOfWeek string `json:"dayOfWeek"`
		Id        string `json:"id"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1ReleasesDayOfWeekResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ReleasesDayOfWeekResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostApiV1AdminLoginWithBodyWithResponse request with arbitrary body returning *PostApiV1AdminLoginResponse
func (c *ClientWithResponses) PostApiV1AdminLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AdminLoginResponse, error) {
	rsp, err := c.PostApiV1AdminLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AdminLoginResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1AdminLoginWithResponse(ctx context.Context, body PostApiV1AdminLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AdminLoginResponse, error) {
	rsp, err := c.PostApiV1AdminLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AdminLoginResponse(rsp)
}

// PostApiV1AdminLogoutWithResponse request returning *PostApiV1AdminLogoutResponse
func (c *ClientWithResponses) PostApiV1AdminLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1AdminLogoutResponse, error) {
	rsp, err := c.PostApiV1AdminLogout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AdminLogoutResponse(rsp)
}

// GetApiV1AdminMeWithResponse request returning *GetApiV1AdminMeResponse
func (c *ClientWithResponses) GetApiV1AdminMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AdminMeResponse, error) {
	rsp, err := c.GetApiV1AdminMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AdminMeResponse(rsp)
}

// GetApiV1AuthorsWithResponse request returning *GetApiV1AuthorsResponse
func (c *ClientWithResponses) GetApiV1AuthorsWithResponse(ctx context.Context, params *GetApiV1AuthorsParams, reqEditors ...RequestEditorFn) (*GetApiV1AuthorsResponse, error) {
	rsp, err := c.GetApiV1Authors(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AuthorsResponse(rsp)
}

// PostApiV1AuthorsWithBodyWithResponse request with arbitrary body returning *PostApiV1AuthorsResponse
func (c *ClientWithResponses) PostApiV1AuthorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1AuthorsResponse, error) {
	rsp, err := c.PostApiV1AuthorsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AuthorsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1AuthorsWithResponse(ctx context.Context, body PostApiV1AuthorsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1AuthorsResponse, error) {
	rsp, err := c.PostApiV1Authors(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AuthorsResponse(rsp)
}

// DeleteApiV1AuthorsAuthorIdWithResponse request returning *DeleteApiV1AuthorsAuthorIdResponse
func (c *ClientWithResponses) DeleteApiV1AuthorsAuthorIdWithResponse(ctx context.Context, authorId string, reqEditors ...RequestEditorFn) (*DeleteApiV1AuthorsAuthorIdResponse, error) {
	rsp, err := c.DeleteApiV1AuthorsAuthorId(ctx, authorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1AuthorsAuthorIdResponse(rsp)
}

// GetApiV1AuthorsAuthorIdWithResponse request returning *GetApiV1AuthorsAuthorIdResponse
func (c *ClientWithResponses) GetApiV1AuthorsAuthorIdWithResponse(ctx context.Context, authorId string, reqEditors ...RequestEditorFn) (*GetApiV1AuthorsAuthorIdResponse, error) {
	rsp, err := c.GetApiV1AuthorsAuthorId(ctx, authorId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AuthorsAuthorIdResponse(rsp)
}

// PatchApiV1AuthorsAuthorIdWithBodyWithResponse request with arbitrary body returning *PatchApiV1AuthorsAuthorIdResponse
func (c *ClientWithResponses) PatchApiV1AuthorsAuthorIdWithBodyWithResponse(ctx context.Context, authorId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1AuthorsAuthorIdResponse, error) {
	rsp, err := c.PatchApiV1AuthorsAuthorIdWithBody(ctx, authorId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV1AuthorsAuthorIdResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV1AuthorsAuthorIdWithResponse(ctx context.Context, authorId string, body PatchApiV1AuthorsAuthorIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1AuthorsAuthorIdResponse, error) {
	rsp, err := c.PatchApiV1AuthorsAuthorId(ctx, authorId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV1AuthorsAuthorIdResponse(rsp)
}

// GetApiV1BooksWithResponse request returning *GetApiV1BooksResponse
func (c *ClientWithResponses) GetApiV1BooksWithResponse(ctx context.Context, params *GetApiV1BooksParams, reqEditors ...RequestEditorFn) (*GetApiV1BooksResponse, error) {
	rsp, err := c.GetApiV1Books(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1BooksResponse(rsp)
}

// PostApiV1BooksWithBodyWithResponse request with arbitrary body returning *PostApiV1BooksResponse
func (c *ClientWithResponses) PostApiV1BooksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1BooksResponse, error) {
	rsp, err := c.PostApiV1BooksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1BooksResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1BooksWithResponse(ctx context.Context, body PostApiV1BooksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1BooksResponse, error) {
	rsp, err := c.PostApiV1Books(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1BooksResponse(rsp)
}

// DeleteApiV1BooksBookIdWithResponse request returning *DeleteApiV1BooksBookIdResponse
func (c *ClientWithResponses) DeleteApiV1BooksBookIdWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*DeleteApiV1BooksBookIdResponse, error) {
	rsp, err := c.DeleteApiV1BooksBookId(ctx, bookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1BooksBookIdResponse(rsp)
}

// GetApiV1BooksBookIdWithResponse request returning *GetApiV1BooksBookIdResponse
func (c *ClientWithResponses) GetApiV1BooksBookIdWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*GetApiV1BooksBookIdResponse, error) {
	rsp, err := c.GetApiV1BooksBookId(ctx, bookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1BooksBookIdResponse(rsp)
}

// PatchApiV1BooksBookIdWithBodyWithResponse request with arbitrary body returning *PatchApiV1BooksBookIdResponse
func (c *ClientWithResponses) PatchApiV1BooksBookIdWithBodyWithResponse(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1BooksBookIdResponse, error) {
	rsp, err := c.PatchApiV1BooksBookIdWithBody(ctx, bookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV1BooksBookIdResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV1BooksBookIdWithResponse(ctx context.Context, bookId string, body PatchApiV1BooksBookIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1BooksBookIdResponse, error) {
	rsp, err := c.PatchApiV1BooksBookId(ctx, bookId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV1BooksBookIdResponse(rsp)
}

// GetApiV1EpisodePagesWithResponse request returning *GetApiV1EpisodePagesResponse
func (c *ClientWithResponses) GetApiV1EpisodePagesWithResponse(ctx context.Context, params *GetApiV1EpisodePagesParams, reqEditors ...RequestEditorFn) (*GetApiV1EpisodePagesResponse, error) {
	rsp, err := c.GetApiV1EpisodePages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1EpisodePagesResponse(rsp)
}

// PostApiV1EpisodePagesWithBodyWithResponse request with arbitrary body returning *PostApiV1EpisodePagesResponse
func (c *ClientWithResponses) PostApiV1EpisodePagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1EpisodePagesResponse, error) {
	rsp, err := c.PostApiV1EpisodePagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1EpisodePagesResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1EpisodePagesWithResponse(ctx context.Context, body PostApiV1EpisodePagesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1EpisodePagesResponse, error) {
	rsp, err := c.PostApiV1EpisodePages(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1EpisodePagesResponse(rsp)
}

// DeleteApiV1EpisodePagesEpisodePageIdWithResponse request returning *DeleteApiV1EpisodePagesEpisodePageIdResponse
func (c *ClientWithResponses) DeleteApiV1EpisodePagesEpisodePageIdWithResponse(ctx context.Context, episodePageId string, reqEditors ...RequestEditorFn) (*DeleteApiV1EpisodePagesEpisodePageIdResponse, error) {
	rsp, err := c.DeleteApiV1EpisodePagesEpisodePageId(ctx, episodePageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1EpisodePagesEpisodePageIdResponse(rsp)
}

// PatchApiV1EpisodePagesEpisodePageIdWithBodyWithResponse request with arbitrary body returning *PatchApiV1EpisodePagesEpisodePageIdResponse
func (c *ClientWithResponses) PatchApiV1EpisodePagesEpisodePageIdWithBodyWithResponse(ctx context.Context, episodePageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1EpisodePagesEpisodePageIdResponse, error) {
	rsp, err := c.PatchApiV1EpisodePagesEpisodePageIdWithBody(ctx, episodePageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV1EpisodePagesEpisodePageIdResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV1EpisodePagesEpisodePageIdWithResponse(ctx context.Context, episodePageId string, body PatchApiV1EpisodePagesEpisodePageIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1EpisodePagesEpisodePageIdResponse, error) {
	rsp, err := c.PatchApiV1EpisodePagesEpisodePageId(ctx, episodePageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV1EpisodePagesEpisodePageIdResponse(rsp)
}

// GetApiV1EpisodePagesPageIdWithResponse request returning *GetApiV1EpisodePagesPageIdResponse
func (c *ClientWithResponses) GetApiV1EpisodePagesPageIdWithResponse(ctx context.Context, pageId string, reqEditors ...RequestEditorFn) (*GetApiV1EpisodePagesPageIdResponse, error) {
	rsp, err := c.GetApiV1EpisodePagesPageId(ctx, pageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1EpisodePagesPageIdResponse(rsp)
}

// GetApiV1EpisodesWithResponse request returning *GetApiV1EpisodesResponse
func (c *ClientWithResponses) GetApiV1EpisodesWithResponse(ctx context.Context, params *GetApiV1EpisodesParams, reqEditors ...RequestEditorFn) (*GetApiV1EpisodesResponse, error) {
	rsp, err := c.GetApiV1Episodes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1EpisodesResponse(rsp)
}

// PostApiV1EpisodesWithBodyWithResponse request with arbitrary body returning *PostApiV1EpisodesResponse
func (c *ClientWithResponses) PostApiV1EpisodesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1EpisodesResponse, error) {
	rsp, err := c.PostApiV1EpisodesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1EpisodesResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1EpisodesWithResponse(ctx context.Context, body PostApiV1EpisodesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1EpisodesResponse, error) {
	rsp, err := c.PostApiV1Episodes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1EpisodesResponse(rsp)
}

// DeleteApiV1EpisodesEpisodeIdWithResponse request returning *DeleteApiV1EpisodesEpisodeIdResponse
func (c *ClientWithResponses) DeleteApiV1EpisodesEpisodeIdWithResponse(ctx context.Context, episodeId string, reqEditors ...RequestEditorFn) (*DeleteApiV1EpisodesEpisodeIdResponse, error) {
	rsp, err := c.DeleteApiV1EpisodesEpisodeId(ctx, episodeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1EpisodesEpisodeIdResponse(rsp)
}

// GetApiV1EpisodesEpisodeIdWithResponse request returning *GetApiV1EpisodesEpisodeIdResponse
func (c *ClientWithResponses) GetApiV1EpisodesEpisodeIdWithResponse(ctx context.Context, episodeId string, reqEditors ...RequestEditorFn) (*GetApiV1EpisodesEpisodeIdResponse, error) {
	rsp, err := c.GetApiV1EpisodesEpisodeId(ctx, episodeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1EpisodesEpisodeIdResponse(rsp)
}

// PatchApiV1EpisodesEpisodeIdWithBodyWithResponse request with arbitrary body returning *PatchApiV1EpisodesEpisodeIdResponse
func (c *ClientWithResponses) PatchApiV1EpisodesEpisodeIdWithBodyWithResponse(ctx context.Context, episodeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApiV1EpisodesEpisodeIdResponse, error) {
	rsp, err := c.PatchApiV1EpisodesEpisodeIdWithBody(ctx, episodeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV1EpisodesEpisodeIdResponse(rsp)
}

func (c *ClientWithResponses) PatchApiV1EpisodesEpisodeIdWithResponse(ctx context.Context, episodeId string, body PatchApiV1EpisodesEpisodeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApiV1EpisodesEpisodeIdResponse, error) {
	rsp, err := c.PatchApiV1EpisodesEpisodeId(ctx, episodeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApiV1EpisodesEpisodeIdResponse(rsp)
}

// GetApiV1FeaturesWithResponse request returning *GetApiV1FeaturesResponse
func (c *ClientWithResponses) GetApiV1FeaturesWithResponse(ctx context.Context, params *GetApiV1FeaturesParams, reqEditors ...RequestEditorFn) (*GetApiV1FeaturesResponse, error) {
	rsp, err := c.GetApiV1Features(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1FeaturesResponse(rsp)
}

// PostApiV1ImagesWithBodyWithResponse request with arbitrary body returning *PostApiV1ImagesResponse
func (c *ClientWithResponses) PostApiV1ImagesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ImagesResponse, error) {
	rsp, err := c.PostApiV1ImagesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ImagesResponse(rsp)
}

// PostApiV1InitializeWithResponse request returning *PostApiV1InitializeResponse
func (c *ClientWithResponses) PostApiV1InitializeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1InitializeResponse, error) {
	rsp, err := c.PostApiV1Initialize(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1InitializeResponse(rsp)
}

// GetApiV1RankingsWithResponse request returning *GetApiV1RankingsResponse
func (c *ClientWithResponses) GetApiV1RankingsWithResponse(ctx context.Context, params *GetApiV1RankingsParams, reqEditors ...RequestEditorFn) (*GetApiV1RankingsResponse, error) {
	rsp, err := c.GetApiV1Rankings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1RankingsResponse(rsp)
}

// GetApiV1ReleasesWithResponse request returning *GetApiV1ReleasesResponse
func (c *ClientWithResponses) GetApiV1ReleasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ReleasesResponse, error) {
	rsp, err := c.GetApiV1Releases(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ReleasesResponse(rsp)
}

// GetApiV1ReleasesDayOfWeekWithResponse request returning *GetApiV1ReleasesDayOfWeekResponse
func (c *ClientWithResponses) GetApiV1ReleasesDayOfWeekWithResponse(ctx context.Context, dayOfWeek string, reqEditors ...RequestEditorFn) (*GetApiV1ReleasesDayOfWeekResponse, error) {
	rsp, err := c.GetApiV1ReleasesDayOfWeek(ctx, dayOfWeek, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ReleasesDayOfWeekResponse(rsp)
}

// ParsePostApiV1AdminLoginResponse parses an HTTP response from a PostApiV1AdminLoginWithResponse call
func ParsePostApiV1AdminLoginResponse(rsp *http.Response) (*PostApiV1AdminLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AdminLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Description string `json:"description"`
			Id          string `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1AdminLogoutResponse parses an HTTP response from a PostApiV1AdminLogoutWithResponse call
func ParsePostApiV1AdminLogoutResponse(rsp *http.Response) (*PostApiV1AdminLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AdminLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1AdminMeResponse parses an HTTP response from a GetApiV1AdminMeWithResponse call
func ParseGetApiV1AdminMeResponse(rsp *http.Response) (*GetApiV1AdminMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AdminMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Description string `json:"description"`
			Id          string `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1AuthorsResponse parses an HTTP response from a GetApiV1AuthorsWithResponse call
func ParseGetApiV1AuthorsResponse(rsp *http.Response) (*GetApiV1AuthorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AuthorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Books []struct {
				Description string `json:"description"`
				Episodes    []struct {
					Chapter     float32 `json:"chapter"`
					Description string  `json:"description"`
					Id          string  `json:"id"`
					Name        string  `json:"name"`
				} `json:"episodes"`
				Id    string `json:"id"`
				Image struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"books"`
			Description string `json:"description"`
			Id          string `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1AuthorsResponse parses an HTTP response from a PostApiV1AuthorsWithResponse call
func ParsePostApiV1AuthorsResponse(rsp *http.Response) (*PostApiV1AuthorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AuthorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Books []struct {
				Description string `json:"description"`
				Episodes    []struct {
					Chapter     float32 `json:"chapter"`
					Description string  `json:"description"`
					Id          string  `json:"id"`
					Name        string  `json:"name"`
				} `json:"episodes"`
				Id    string `json:"id"`
				Image struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"books"`
			Description string `json:"description"`
			Id          string `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1AuthorsAuthorIdResponse parses an HTTP response from a DeleteApiV1AuthorsAuthorIdWithResponse call
func ParseDeleteApiV1AuthorsAuthorIdResponse(rsp *http.Response) (*DeleteApiV1AuthorsAuthorIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1AuthorsAuthorIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1AuthorsAuthorIdResponse parses an HTTP response from a GetApiV1AuthorsAuthorIdWithResponse call
func ParseGetApiV1AuthorsAuthorIdResponse(rsp *http.Response) (*GetApiV1AuthorsAuthorIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AuthorsAuthorIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Books []struct {
				Description string `json:"description"`
				Episodes    []struct {
					Chapter     float32 `json:"chapter"`
					Description string  `json:"description"`
					Id          string  `json:"id"`
					Name        string  `json:"name"`
				} `json:"episodes"`
				Id    string `json:"id"`
				Image struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"books"`
			Description string `json:"description"`
			Id          string `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchApiV1AuthorsAuthorIdResponse parses an HTTP response from a PatchApiV1AuthorsAuthorIdWithResponse call
func ParsePatchApiV1AuthorsAuthorIdResponse(rsp *http.Response) (*PatchApiV1AuthorsAuthorIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV1AuthorsAuthorIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Books []struct {
				Description string `json:"description"`
				Episodes    []struct {
					Chapter     float32 `json:"chapter"`
					Description string  `json:"description"`
					Id          string  `json:"id"`
					Name        string  `json:"name"`
				} `json:"episodes"`
				Id    string `json:"id"`
				Image struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"books"`
			Description string `json:"description"`
			Id          string `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1BooksResponse parses an HTTP response from a GetApiV1BooksWithResponse call
func ParseGetApiV1BooksResponse(rsp *http.Response) (*GetApiV1BooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1BooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Author struct {
				Description string `json:"description"`
				Id          string `json:"id"`
				Image       struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"author"`
			Description string `json:"description"`
			Episodes    []struct {
				Id string `json:"id"`
			} `json:"episodes"`
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name     string `json:"name"`
			NameRuby string `json:"nameRuby"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1BooksResponse parses an HTTP response from a PostApiV1BooksWithResponse call
func ParsePostApiV1BooksResponse(rsp *http.Response) (*PostApiV1BooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1BooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Author struct {
				Description string `json:"description"`
				Id          string `json:"id"`
				Image       struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"author"`
			Description string `json:"description"`
			Episodes    []struct {
				Id string `json:"id"`
			} `json:"episodes"`
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name     string `json:"name"`
			NameRuby string `json:"nameRuby"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1BooksBookIdResponse parses an HTTP response from a DeleteApiV1BooksBookIdWithResponse call
func ParseDeleteApiV1BooksBookIdResponse(rsp *http.Response) (*DeleteApiV1BooksBookIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1BooksBookIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1BooksBookIdResponse parses an HTTP response from a GetApiV1BooksBookIdWithResponse call
func ParseGetApiV1BooksBookIdResponse(rsp *http.Response) (*GetApiV1BooksBookIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1BooksBookIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Author struct {
				Description string `json:"description"`
				Id          string `json:"id"`
				Image       struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"author"`
			Description string `json:"description"`
			Episodes    []struct {
				Id string `json:"id"`
			} `json:"episodes"`
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name     string `json:"name"`
			NameRuby string `json:"nameRuby"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchApiV1BooksBookIdResponse parses an HTTP response from a PatchApiV1BooksBookIdWithResponse call
func ParsePatchApiV1BooksBookIdResponse(rsp *http.Response) (*PatchApiV1BooksBookIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV1BooksBookIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Author struct {
				Description string `json:"description"`
				Id          string `json:"id"`
				Image       struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"author"`
			Description string `json:"description"`
			Episodes    []struct {
				Id string `json:"id"`
			} `json:"episodes"`
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name     string `json:"name"`
			NameRuby string `json:"nameRuby"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1EpisodePagesResponse parses an HTTP response from a GetApiV1EpisodePagesWithResponse call
func ParseGetApiV1EpisodePagesResponse(rsp *http.Response) (*GetApiV1EpisodePagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1EpisodePagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Page float32 `json:"page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1EpisodePagesResponse parses an HTTP response from a PostApiV1EpisodePagesWithResponse call
func ParsePostApiV1EpisodePagesResponse(rsp *http.Response) (*PostApiV1EpisodePagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1EpisodePagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Page float32 `json:"page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1EpisodePagesEpisodePageIdResponse parses an HTTP response from a DeleteApiV1EpisodePagesEpisodePageIdWithResponse call
func ParseDeleteApiV1EpisodePagesEpisodePageIdResponse(rsp *http.Response) (*DeleteApiV1EpisodePagesEpisodePageIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1EpisodePagesEpisodePageIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchApiV1EpisodePagesEpisodePageIdResponse parses an HTTP response from a PatchApiV1EpisodePagesEpisodePageIdWithResponse call
func ParsePatchApiV1EpisodePagesEpisodePageIdResponse(rsp *http.Response) (*PatchApiV1EpisodePagesEpisodePageIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV1EpisodePagesEpisodePageIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Page float32 `json:"page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1EpisodePagesPageIdResponse parses an HTTP response from a GetApiV1EpisodePagesPageIdWithResponse call
func ParseGetApiV1EpisodePagesPageIdResponse(rsp *http.Response) (*GetApiV1EpisodePagesPageIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1EpisodePagesPageIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id    string `json:"id"`
			Image struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Page float32 `json:"page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1EpisodesResponse parses an HTTP response from a GetApiV1EpisodesWithResponse call
func ParseGetApiV1EpisodesResponse(rsp *http.Response) (*GetApiV1EpisodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1EpisodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Book struct {
				Author struct {
					Description string `json:"description"`
					Id          string `json:"id"`
					Image       struct {
						Alt string `json:"alt"`
						Id  string `json:"id"`
					} `json:"image"`
					Name string `json:"name"`
				} `json:"author"`
				Description string `json:"description"`
				Id          string `json:"id"`
				Image       struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name     string `json:"name"`
				NameRuby string `json:"nameRuby"`
			} `json:"book"`
			Chapter     float32 `json:"chapter"`
			Description string  `json:"description"`
			Id          string  `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name     string `json:"name"`
			NameRuby string `json:"nameRuby"`
			Pages    []struct {
				Id    string `json:"id"`
				Image struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Page float32 `json:"page"`
			} `json:"pages"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1EpisodesResponse parses an HTTP response from a PostApiV1EpisodesWithResponse call
func ParsePostApiV1EpisodesResponse(rsp *http.Response) (*PostApiV1EpisodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1EpisodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Book struct {
				Author struct {
					Description string `json:"description"`
					Id          string `json:"id"`
					Image       struct {
						Alt string `json:"alt"`
						Id  string `json:"id"`
					} `json:"image"`
					Name string `json:"name"`
				} `json:"author"`
				Description string `json:"description"`
				Id          string `json:"id"`
				Image       struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name     string `json:"name"`
				NameRuby string `json:"nameRuby"`
			} `json:"book"`
			Chapter     float32 `json:"chapter"`
			Description string  `json:"description"`
			Id          string  `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name     string `json:"name"`
			NameRuby string `json:"nameRuby"`
			Pages    []struct {
				Id    string `json:"id"`
				Image struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Page float32 `json:"page"`
			} `json:"pages"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1EpisodesEpisodeIdResponse parses an HTTP response from a DeleteApiV1EpisodesEpisodeIdWithResponse call
func ParseDeleteApiV1EpisodesEpisodeIdResponse(rsp *http.Response) (*DeleteApiV1EpisodesEpisodeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1EpisodesEpisodeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1EpisodesEpisodeIdResponse parses an HTTP response from a GetApiV1EpisodesEpisodeIdWithResponse call
func ParseGetApiV1EpisodesEpisodeIdResponse(rsp *http.Response) (*GetApiV1EpisodesEpisodeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1EpisodesEpisodeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Book struct {
				Author struct {
					Description string `json:"description"`
					Id          string `json:"id"`
					Image       struct {
						Alt string `json:"alt"`
						Id  string `json:"id"`
					} `json:"image"`
					Name string `json:"name"`
				} `json:"author"`
				Description string `json:"description"`
				Id          string `json:"id"`
				Image       struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name     string `json:"name"`
				NameRuby string `json:"nameRuby"`
			} `json:"book"`
			Chapter     float32 `json:"chapter"`
			Description string  `json:"description"`
			Id          string  `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name     string `json:"name"`
			NameRuby string `json:"nameRuby"`
			Pages    []struct {
				Id    string `json:"id"`
				Image struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Page float32 `json:"page"`
			} `json:"pages"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchApiV1EpisodesEpisodeIdResponse parses an HTTP response from a PatchApiV1EpisodesEpisodeIdWithResponse call
func ParsePatchApiV1EpisodesEpisodeIdResponse(rsp *http.Response) (*PatchApiV1EpisodesEpisodeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApiV1EpisodesEpisodeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Book struct {
				Author struct {
					Description string `json:"description"`
					Id          string `json:"id"`
					Image       struct {
						Alt string `json:"alt"`
						Id  string `json:"id"`
					} `json:"image"`
					Name string `json:"name"`
				} `json:"author"`
				Description string `json:"description"`
				Id          string `json:"id"`
				Image       struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name     string `json:"name"`
				NameRuby string `json:"nameRuby"`
			} `json:"book"`
			Chapter     float32 `json:"chapter"`
			Description string  `json:"description"`
			Id          string  `json:"id"`
			Image       struct {
				Alt string `json:"alt"`
				Id  string `json:"id"`
			} `json:"image"`
			Name     string `json:"name"`
			NameRuby string `json:"nameRuby"`
			Pages    []struct {
				Id    string `json:"id"`
				Image struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Page float32 `json:"page"`
			} `json:"pages"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1FeaturesResponse parses an HTTP response from a GetApiV1FeaturesWithResponse call
func ParseGetApiV1FeaturesResponse(rsp *http.Response) (*GetApiV1FeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1FeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Book struct {
				Author struct {
					Description string `json:"description"`
					Id          string `json:"id"`
					Image       struct {
						Alt string `json:"alt"`
						Id  string `json:"id"`
					} `json:"image"`
					Name string `json:"name"`
				} `json:"author"`
				Description string `json:"description"`
				Id          string `json:"id"`
				Image       struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"book"`
			Id string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1ImagesResponse parses an HTTP response from a PostApiV1ImagesWithResponse call
func ParsePostApiV1ImagesResponse(rsp *http.Response) (*PostApiV1ImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Alt string `json:"alt"`
			Id  string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1InitializeResponse parses an HTTP response from a PostApiV1InitializeWithResponse call
func ParsePostApiV1InitializeResponse(rsp *http.Response) (*PostApiV1InitializeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1InitializeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1RankingsResponse parses an HTTP response from a GetApiV1RankingsWithResponse call
func ParseGetApiV1RankingsResponse(rsp *http.Response) (*GetApiV1RankingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1RankingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Book struct {
				Author struct {
					Description string `json:"description"`
					Id          string `json:"id"`
					Image       struct {
						Alt string `json:"alt"`
						Id  string `json:"id"`
					} `json:"image"`
					Name string `json:"name"`
				} `json:"author"`
				Description string `json:"description"`
				Episodes    []struct {
					Chapter     float32 `json:"chapter"`
					Description string  `json:"description"`
					Id          string  `json:"id"`
					Name        string  `json:"name"`
				} `json:"episodes"`
				Id    string `json:"id"`
				Image struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"book"`
			Id   string  `json:"id"`
			Rank float32 `json:"rank"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1ReleasesResponse parses an HTTP response from a GetApiV1ReleasesWithResponse call
func ParseGetApiV1ReleasesResponse(rsp *http.Response) (*GetApiV1ReleasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ReleasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			DayOfWeek string `json:"dayOfWeek"`
			Id        string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1ReleasesDayOfWeekResponse parses an HTTP response from a GetApiV1ReleasesDayOfWeekWithResponse call
func ParseGetApiV1ReleasesDayOfWeekResponse(rsp *http.Response) (*GetApiV1ReleasesDayOfWeekResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ReleasesDayOfWeekResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Books []struct {
				Author struct {
					Description string `json:"description"`
					Id          string `json:"id"`
					Image       struct {
						Alt string `json:"alt"`
						Id  string `json:"id"`
					} `json:"image"`
					Name string `json:"name"`
				} `json:"author"`
				Id    string `json:"id"`
				Image struct {
					Alt string `json:"alt"`
					Id  string `json:"id"`
				} `json:"image"`
				Name string `json:"name"`
			} `json:"books"`
			DayOfWeek string `json:"dayOfWeek"`
			Id        string `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v1/admin/login)
	PostApiV1AdminLogin(ctx echo.Context) error

	// (POST /api/v1/admin/logout)
	PostApiV1AdminLogout(ctx echo.Context) error

	// (GET /api/v1/admin/me)
	GetApiV1AdminMe(ctx echo.Context) error

	// (GET /api/v1/authors)
	GetApiV1Authors(ctx echo.Context, params GetApiV1AuthorsParams) error

	// (POST /api/v1/authors)
	PostApiV1Authors(ctx echo.Context) error

	// (DELETE /api/v1/authors/{authorId})
	DeleteApiV1AuthorsAuthorId(ctx echo.Context, authorId string) error

	// (GET /api/v1/authors/{authorId})
	GetApiV1AuthorsAuthorId(ctx echo.Context, authorId string) error

	// (PATCH /api/v1/authors/{authorId})
	PatchApiV1AuthorsAuthorId(ctx echo.Context, authorId string) error

	// (GET /api/v1/books)
	GetApiV1Books(ctx echo.Context, params GetApiV1BooksParams) error

	// (POST /api/v1/books)
	PostApiV1Books(ctx echo.Context) error

	// (DELETE /api/v1/books/{bookId})
	DeleteApiV1BooksBookId(ctx echo.Context, bookId string) error

	// (GET /api/v1/books/{bookId})
	GetApiV1BooksBookId(ctx echo.Context, bookId string) error

	// (PATCH /api/v1/books/{bookId})
	PatchApiV1BooksBookId(ctx echo.Context, bookId string) error

	// (GET /api/v1/episodePages)
	GetApiV1EpisodePages(ctx echo.Context, params GetApiV1EpisodePagesParams) error

	// (POST /api/v1/episodePages)
	PostApiV1EpisodePages(ctx echo.Context) error

	// (DELETE /api/v1/episodePages/{episodePageId})
	DeleteApiV1EpisodePagesEpisodePageId(ctx echo.Context, episodePageId string) error

	// (PATCH /api/v1/episodePages/{episodePageId})
	PatchApiV1EpisodePagesEpisodePageId(ctx echo.Context, episodePageId string) error

	// (GET /api/v1/episodePages/{pageId})
	GetApiV1EpisodePagesPageId(ctx echo.Context, pageId string) error

	// (GET /api/v1/episodes)
	GetApiV1Episodes(ctx echo.Context, params GetApiV1EpisodesParams) error

	// (POST /api/v1/episodes)
	PostApiV1Episodes(ctx echo.Context) error

	// (DELETE /api/v1/episodes/{episodeId})
	DeleteApiV1EpisodesEpisodeId(ctx echo.Context, episodeId string) error

	// (GET /api/v1/episodes/{episodeId})
	GetApiV1EpisodesEpisodeId(ctx echo.Context, episodeId string) error

	// (PATCH /api/v1/episodes/{episodeId})
	PatchApiV1EpisodesEpisodeId(ctx echo.Context, episodeId string) error

	// (GET /api/v1/features)
	GetApiV1Features(ctx echo.Context, params GetApiV1FeaturesParams) error

	// (POST /api/v1/images)
	PostApiV1Images(ctx echo.Context) error

	// (POST /api/v1/initialize)
	PostApiV1Initialize(ctx echo.Context) error

	// (GET /api/v1/rankings)
	GetApiV1Rankings(ctx echo.Context, params GetApiV1RankingsParams) error

	// (GET /api/v1/releases)
	GetApiV1Releases(ctx echo.Context) error

	// (GET /api/v1/releases/{dayOfWeek})
	GetApiV1ReleasesDayOfWeek(ctx echo.Context, dayOfWeek string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostApiV1AdminLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV1AdminLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiV1AdminLogin(ctx)
	return err
}

// PostApiV1AdminLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV1AdminLogout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiV1AdminLogout(ctx)
	return err
}

// GetApiV1AdminMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1AdminMe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1AdminMe(ctx)
	return err
}

// GetApiV1Authors converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1Authors(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1AuthorsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1Authors(ctx, params)
	return err
}

// PostApiV1Authors converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV1Authors(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiV1Authors(ctx)
	return err
}

// DeleteApiV1AuthorsAuthorId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApiV1AuthorsAuthorId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authorId" -------------
	var authorId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "authorId", runtime.ParamLocationPath, ctx.Param("authorId"), &authorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authorId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApiV1AuthorsAuthorId(ctx, authorId)
	return err
}

// GetApiV1AuthorsAuthorId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1AuthorsAuthorId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authorId" -------------
	var authorId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "authorId", runtime.ParamLocationPath, ctx.Param("authorId"), &authorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authorId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1AuthorsAuthorId(ctx, authorId)
	return err
}

// PatchApiV1AuthorsAuthorId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchApiV1AuthorsAuthorId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authorId" -------------
	var authorId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "authorId", runtime.ParamLocationPath, ctx.Param("authorId"), &authorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authorId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchApiV1AuthorsAuthorId(ctx, authorId)
	return err
}

// GetApiV1Books converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1Books(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1BooksParams
	// ------------- Optional query parameter "authorId" -------------

	err = runtime.BindQueryParameter("form", true, false, "authorId", ctx.QueryParams(), &params.AuthorId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authorId: %s", err))
	}

	// ------------- Optional query parameter "authorName" -------------

	err = runtime.BindQueryParameter("form", true, false, "authorName", ctx.QueryParams(), &params.AuthorName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authorName: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1Books(ctx, params)
	return err
}

// PostApiV1Books converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV1Books(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiV1Books(ctx)
	return err
}

// DeleteApiV1BooksBookId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApiV1BooksBookId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, ctx.Param("bookId"), &bookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bookId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApiV1BooksBookId(ctx, bookId)
	return err
}

// GetApiV1BooksBookId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1BooksBookId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, ctx.Param("bookId"), &bookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bookId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1BooksBookId(ctx, bookId)
	return err
}

// PatchApiV1BooksBookId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchApiV1BooksBookId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, ctx.Param("bookId"), &bookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bookId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchApiV1BooksBookId(ctx, bookId)
	return err
}

// GetApiV1EpisodePages converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1EpisodePages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1EpisodePagesParams
	// ------------- Required query parameter "episodeId" -------------

	err = runtime.BindQueryParameter("form", true, true, "episodeId", ctx.QueryParams(), &params.EpisodeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter episodeId: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1EpisodePages(ctx, params)
	return err
}

// PostApiV1EpisodePages converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV1EpisodePages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiV1EpisodePages(ctx)
	return err
}

// DeleteApiV1EpisodePagesEpisodePageId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApiV1EpisodePagesEpisodePageId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "episodePageId" -------------
	var episodePageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "episodePageId", runtime.ParamLocationPath, ctx.Param("episodePageId"), &episodePageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter episodePageId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApiV1EpisodePagesEpisodePageId(ctx, episodePageId)
	return err
}

// PatchApiV1EpisodePagesEpisodePageId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchApiV1EpisodePagesEpisodePageId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "episodePageId" -------------
	var episodePageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "episodePageId", runtime.ParamLocationPath, ctx.Param("episodePageId"), &episodePageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter episodePageId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchApiV1EpisodePagesEpisodePageId(ctx, episodePageId)
	return err
}

// GetApiV1EpisodePagesPageId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1EpisodePagesPageId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "pageId" -------------
	var pageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "pageId", runtime.ParamLocationPath, ctx.Param("pageId"), &pageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1EpisodePagesPageId(ctx, pageId)
	return err
}

// GetApiV1Episodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1Episodes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1EpisodesParams
	// ------------- Required query parameter "bookId" -------------

	err = runtime.BindQueryParameter("form", true, true, "bookId", ctx.QueryParams(), &params.BookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bookId: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1Episodes(ctx, params)
	return err
}

// PostApiV1Episodes converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV1Episodes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiV1Episodes(ctx)
	return err
}

// DeleteApiV1EpisodesEpisodeId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApiV1EpisodesEpisodeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "episodeId" -------------
	var episodeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "episodeId", runtime.ParamLocationPath, ctx.Param("episodeId"), &episodeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter episodeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApiV1EpisodesEpisodeId(ctx, episodeId)
	return err
}

// GetApiV1EpisodesEpisodeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1EpisodesEpisodeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "episodeId" -------------
	var episodeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "episodeId", runtime.ParamLocationPath, ctx.Param("episodeId"), &episodeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter episodeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1EpisodesEpisodeId(ctx, episodeId)
	return err
}

// PatchApiV1EpisodesEpisodeId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchApiV1EpisodesEpisodeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "episodeId" -------------
	var episodeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "episodeId", runtime.ParamLocationPath, ctx.Param("episodeId"), &episodeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter episodeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchApiV1EpisodesEpisodeId(ctx, episodeId)
	return err
}

// GetApiV1Features converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1Features(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1FeaturesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1Features(ctx, params)
	return err
}

// PostApiV1Images converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV1Images(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiV1Images(ctx)
	return err
}

// PostApiV1Initialize converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV1Initialize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiV1Initialize(ctx)
	return err
}

// GetApiV1Rankings converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1Rankings(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1RankingsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1Rankings(ctx, params)
	return err
}

// GetApiV1Releases converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1Releases(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1Releases(ctx)
	return err
}

// GetApiV1ReleasesDayOfWeek converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1ReleasesDayOfWeek(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dayOfWeek" -------------
	var dayOfWeek string

	err = runtime.BindStyledParameterWithLocation("simple", false, "dayOfWeek", runtime.ParamLocationPath, ctx.Param("dayOfWeek"), &dayOfWeek)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dayOfWeek: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1ReleasesDayOfWeek(ctx, dayOfWeek)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/v1/admin/login", wrapper.PostApiV1AdminLogin)
	router.POST(baseURL+"/api/v1/admin/logout", wrapper.PostApiV1AdminLogout)
	router.GET(baseURL+"/api/v1/admin/me", wrapper.GetApiV1AdminMe)
	router.GET(baseURL+"/api/v1/authors", wrapper.GetApiV1Authors)
	router.POST(baseURL+"/api/v1/authors", wrapper.PostApiV1Authors)
	router.DELETE(baseURL+"/api/v1/authors/:authorId", wrapper.DeleteApiV1AuthorsAuthorId)
	router.GET(baseURL+"/api/v1/authors/:authorId", wrapper.GetApiV1AuthorsAuthorId)
	router.PATCH(baseURL+"/api/v1/authors/:authorId", wrapper.PatchApiV1AuthorsAuthorId)
	router.GET(baseURL+"/api/v1/books", wrapper.GetApiV1Books)
	router.POST(baseURL+"/api/v1/books", wrapper.PostApiV1Books)
	router.DELETE(baseURL+"/api/v1/books/:bookId", wrapper.DeleteApiV1BooksBookId)
	router.GET(baseURL+"/api/v1/books/:bookId", wrapper.GetApiV1BooksBookId)
	router.PATCH(baseURL+"/api/v1/books/:bookId", wrapper.PatchApiV1BooksBookId)
	router.GET(baseURL+"/api/v1/episodePages", wrapper.GetApiV1EpisodePages)
	router.POST(baseURL+"/api/v1/episodePages", wrapper.PostApiV1EpisodePages)
	router.DELETE(baseURL+"/api/v1/episodePages/:episodePageId", wrapper.DeleteApiV1EpisodePagesEpisodePageId)
	router.PATCH(baseURL+"/api/v1/episodePages/:episodePageId", wrapper.PatchApiV1EpisodePagesEpisodePageId)
	router.GET(baseURL+"/api/v1/episodePages/:pageId", wrapper.GetApiV1EpisodePagesPageId)
	router.GET(baseURL+"/api/v1/episodes", wrapper.GetApiV1Episodes)
	router.POST(baseURL+"/api/v1/episodes", wrapper.PostApiV1Episodes)
	router.DELETE(baseURL+"/api/v1/episodes/:episodeId", wrapper.DeleteApiV1EpisodesEpisodeId)
	router.GET(baseURL+"/api/v1/episodes/:episodeId", wrapper.GetApiV1EpisodesEpisodeId)
	router.PATCH(baseURL+"/api/v1/episodes/:episodeId", wrapper.PatchApiV1EpisodesEpisodeId)
	router.GET(baseURL+"/api/v1/features", wrapper.GetApiV1Features)
	router.POST(baseURL+"/api/v1/images", wrapper.PostApiV1Images)
	router.POST(baseURL+"/api/v1/initialize", wrapper.PostApiV1Initialize)
	router.GET(baseURL+"/api/v1/rankings", wrapper.GetApiV1Rankings)
	router.GET(baseURL+"/api/v1/releases", wrapper.GetApiV1Releases)
	router.GET(baseURL+"/api/v1/releases/:dayOfWeek", wrapper.GetApiV1ReleasesDayOfWeek)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcS4/iuBP/Ksjn/Jue/9y4MduzI6R9tEba3UOLgyEGPJ3EHtuZEYv47is7CQnETioQ",
	"aGh8ohtcFdfrV48k3iCaLBgabZCiKiJohMbPk8ETm0sUoB9ESMoSNEIfHh4fHtE2QIyTBHOKRujjw+PD",
	"RxQgjtVKagZDzOnwx4chDmOaDCO2pIn+mjOp9CfjRGBFWTIJ0Qg9M6nGnP79YaxX/2YWB0iQ7ymR6hML",
	"15pkzhJFEkONOY/o3NAPv0lmOMv5isTYXENo7ooSsxESYxoZkdZcSySVoMlS755jKX8yEVp+3GZXp4KE",
	"aPSS86hQTIOCgs2+kblC221GIzlLZHbh/z8+nrDtkMi5oFzRbFlt8zS0fx3jJalzw5GCczkQXtOalRah",
	"91dW92woiv3Y1BXsi4iM1R8MT4WXUvN7Me4wHYxTtRqMnydoqn+teRZLVQfX0qvtlqrth6Wq+4Zio/4l",
	"sezlC6ls5XeCvMOc4jBfiBpgbYhUEtHJTqlaMSHbzZSv03EvcEwU0UQvGiTRCH1PiVijACVYWxxFNKZa",
	"7NI8uQBJGs+I0NuzE5oPC12pXDsdWywkab7i9EQHo4rEsu4bM8ZeZcPvbZ5IOJUsJE0s5ivMFREWoYJj",
	"HT1TW5vvFhcObL5pWNRdc/cFFgKvrybWoCK7BK0Yyh2WddlvAodO100WBHDFuPGLiUFEZS3TcJ7hFxMy",
	"h7CgNcXtAKuf0qnVlFr2ySnhdqDfnJ8z0vousjySeSTzSNaCZHXk+kUQrEgOXu7Kq0SuevE13GR/TMJt",
	"FmgRUaQObU/m+yq4jXMyR1Wm+8+yRsLl4lIXSqSkqd6aQrqDbGMdVBCAas03k84DqAdQD6CXAtCy9ANV",
	"fVjNV5ayT3/9BuBxvZWlrxY92Hmwuzaw+4uHR1eLu5BrLJ4+5XsCjOkqsNd54pbR/nHkvO6OBoSZom50",
	"RH16iLgxo4cMAZHOIddtoXX2w9d0tj7FFjseQeGVR8G7vYTT6OSc3RlQgk7uCgTrp7ragZxNq2covRpN",
	"pYWKCJZ2noeOUsJz42hwz7Al//NPDD20eWi7bWhzjvM0mtnLsyqUHRZnw43+gI/xDK9PhgTUp86KpZcb",
	"cbUqLB/+wRQWAGrX69aHR0CPgO8bAYtiDlDHtc3iLhXP91cn+srO45rHtWNGb50ru/xiz3hJ2qdvn6uL",
	"QUO4nH1H2Ot7rvZ287Er8WGeX66mr8O4zJeeOi7JzT7QzJxjk9ybBsadoOOTAxfs6cHxnZd2hX0HCUzf",
	"1eAopx7cFfL9JsF355nObrfqjHZstHmiAyOHm8p/8F646rafqwxAlSM5oLi+Bvk4HQOK7DdV3I1hi0eM",
	"UxEjr6J6RgxeQgW4vOrg5PzysHB3jnFY1EDrmbpPgKtsYIV9xFTh/ZTXWnjf3/fW399rx+3W2Bme0roF",
	"bWYIKe+6se361NyeaxlgKi5WaPPEbroh53Rtn/trnfP0YzPuSbHT88j5wJq7pOk0q/MhhMu8quSTmk9q",
	"Pqn5pHaLSa1tENfYUTc0TrvRW+exWzE56jY1urZRW7UHtc3UrXoMYL3mLSjIZ0mfJX2W9FnyvWbJzq0e",
	"8N7J5cD9vhpK3wb6BOcTnE9wPsEBE9z+3dWubeCCYJUKwP2zX4uF5z3Nzd/18pnhmhQAQHzgw7l5iB97",
	"uyIPVOdzf0V81kPc7FwCTvicxK3P/8VppCjHQg0XTMT/C7HCjc+EO8xa4aj5YIVGaEYTbJCg3doXeE3x",
	"TMd3uoZ4xkZ27M6sYjFrQhXFEf2XQExbLoaczlQuP9jTJFFEJDiaDoq/6hsTOHmlybI9pXwtFvqU4lNK",
	"Py9K+PNfrippgk4KcAitYQRYqJulZ86vBVhZ8C577QqAd8XC86BNiNd/Lv4h5PVopyg5BLDXieyqzBXi",
	"VmWuB7cqh5vdVrZgtT5Vdt8+kKvKeq2n//lM0Q0yrlPAju1E7VysvsO6OIMKOj3PgxISyeWCw4oSY1zG",
	"Xv2YPl27NRLUz7lqJamN94EX6UZjf0a526W6E1aaAtAO97pDEEX5ZiNwSx0Iaq4Do6hm4A4OA1rvaGw0",
	"4P8ks1UG1EkaRdv/AgAA///DQOBq5GUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
